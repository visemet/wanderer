<project name="${project.name}" default="jar" basedir=".">
  <description/>

  <!-- Global Properties -->
  <property file="build.properties"/>

  <!-- Libraries Path -->
  <path id="libs.path">
    <fileset dir="${lib.dir}">
      <include name="async-http-client-1.7.9.jar"/>
      <include name="logback-classic-1.0.9.jar"/>
      <include name="logback-core-1.0.9.jar"/>
      <include name="netty-3.4.4.Final.jar"/>
      <include name="slf4j-api-1.7.2.jar"/>
      <include name="stringsearch-2.jar"/>
      <include name="xmlpull-1.1.3.1.jar"/>
      <include name="xpp3-min-1.1.4c.jar"/>
      <include name="xstream-1.4.3.jar"/>
    </fileset>
  </path>

  <!-- Project Classpath -->
  <pathconvert property="project.classpath" pathsep=" ">
    <!-- Use libraries path -->
    <path refid="libs.path"/>

    <mapper>
      <chainedmapper>
        <!-- Remove absolute paths -->
        <flattenmapper/>

        <!-- Add a lib/ prefix to each jar -->
        <globmapper from="*.jar" to="lib/*.jar"/>
      </chainedmapper>
    </mapper>
  </pathconvert>

  <target name="init">
    <!-- Create the build directory structure used by compile and javadoc -->
    <mkdir dir="${build.dir}"/>
  </target>

  <target name="compile" depends="init" description="compile the source">
    <!-- Create the classes directory -->
    <mkdir dir="${build.classes.dir}"/> 

    <!-- Compile the java code from ${src.dir} into ${build.classes.dir} -->
    <javac srcdir="${src.dir}" destdir="${build.classes.dir}"
           classpathref="libs.path" target="1.7" includeAntRuntime="false"
           source="1.7">
      <compilerarg value="-Xlint:unchecked"/>
   </javac>
  </target>

  <target name="javadoc" depends="init" description="generate the javadoc">
    <!-- Create the javadoc directory -->
    <mkdir dir="${build.javadoc.dir}"/> 

    <javadoc sourcepath="${src.dir}" destdir="${build.javadoc.dir}"
             classpathref="libs.path"/>
  </target>

  <target name="jar" depends="compile, javadoc"
          description="generate the distribution">

    <!-- Create the distribution directory -->
    <mkdir dir="${dist.dir}"/>

    <!-- Create the library directory within the distribution directory -->
    <mkdir dir="${dist.lib.dir}"/>

    <!-- Copy libraries to distribution-library directory -->
    <copy todir="${dist.lib.dir}" flatten="true">
      <!-- Use libraries path -->
      <path refid="libs.path"/>
    </copy>

    <!--
      Put everything in ${build.classes.dir} into the
      ${project.name}-${project-version}.jar file
    -->
    <jar destfile="${dist.dir}/${project.name}-${project.version}.jar"
         basedir="${build.classes.dir}">
      <manifest>
        <attribute name="Main-Class" value="${project.main}"/>
        <attribute name="Class-Path" value="${project.classpath}"/>
      </manifest>
    </jar>

    <!--
      Put everything in ${src.dir} into the
      ${project.name}-${project-version}-sources.jar file
    -->
    <jar destfile="${dist.dir}/${project.name}-${project.version}-sources.jar"
         basedir="${src.dir}"/>

    <!--
      Put everything in ${build.javadoc.dir} into the
      ${project.name}-${project-version}-javadoc.jar file
    -->
    <jar destfile="${dist.dir}/${project.name}-${project.version}-javadoc.jar"
         basedir="${build.javadoc.dir}"/>
  </target>

  <target name="clean" description="clean up">
    <!-- Delete the ${build.dir} and ${dist.dir} directory trees -->
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
  </target>
</project>
